apiVersion: postgres-operator.crunchydata.com/v1beta1
kind: PostgresCluster
metadata:
    name: grouper-prod
spec:
    imagePullSecrets:
        - name: captain-regcreds
    image: captain.escs.udel.edu:5000/crunchy-postgres:ubi8-14.3-0
    postgresVersion: 14
    instances:
      - name: instance1
        replicas: 3
        dataVolumeClaimSpec:
            storageClassName: "grouper-prod-pgo"
            accessModes:
              - "ReadWriteOnce"
            resources:
                requests:
                    storage: 40G
                limits:
                    cpu: 4.0
                    memory: 32Gi

    patroni:
        dynamicConfiguration:
            synchronous_mode: true
            postgresql:
                parameters:
                    synchronous_commit: "on"
                    max_connections: 400
                    shared_buffers: 1GB
                    work_mem: 200MB
                    max_stack_depth: 7MB
                    effective_cache_size: 30GB
                    log_checkpoints: on
                    log_connections: on
                    log_disconnections: on
                    log_line_prefix: '%m,%d,%u,%r: '
                    log_timezone: 'America/New_York'
                    track_io_timing: on
                    track_functions: all
                    timezone: 'America/New_York'

    backups:
       pgbackrest:
            image: captain.escs.udel.edu:5000/crunchy-pgbackrest:ubi8-2.38-0
            global:
                repo1-retention-full-type: time
                repo1-retention-full: "21"
# kubectl annotate -n postgres-operator postgrescluster <db-name> \
#  postgres-operator.crunchydata.com/pgbackrest-backup="$(date)"
# Add --overwrite when doing another manual dump.
            manual:
                repoName: repo1
                options:
                  - --type=full
            repos:
              - name: repo1
                schedules:
# 1am Sunday: full, differentials other days, and incr every 3 hours
                    full: "0 1 * * 0"
                    differential: "0 1 * * 1-6"
                    incremental: "0 4,7,10,13,16,19,22 * * *"
                volume:
                   volumeClaimSpec:
                       storageClassName: "grouper-prod-repo-pgo"
                       accessModes:
                         - "ReadWriteOnce"
                       resources:
                           requests:
                               storage: 40G
#
# This should cause a secret to be generate which we can easily
# access (with appropriate credentials, of course).
# I had to add the database field in order to get the secret
# create after the DB node existed.
# Also, once you add a 'users' section, you need to list the
# node user here as well.
#

    users:
      - name: postgres
        databases:
          - postgres
      - name: grouper-prod
        databases:
          - grouper-prod
        options: 'CREATEROLE LOGIN'

# End.
